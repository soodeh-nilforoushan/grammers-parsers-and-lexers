/* The following code was generated by JFlex 1.6.0 */

package Faze2;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.*;

class MainClass{
    public static void main(String[] args) {
        FileReader filereader = null;
        String input = "testcase.txt";
        try {
            filereader = new FileReader(input);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        System.out.println("Lexeme \t\t\t Token \t\t\t ");
        Yylex yylex = new Yylex(filereader);
        try {
            yylex.yylex();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/User/Desktop/Phase2.flex</tt>
 */
class Yylex {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\1\16\10\0\1\20\1\15\1\23\1\23\1\22\22\0\1\20\2\0"+
                    "\1\14\1\0\1\67\1\0\1\1\1\52\1\53\1\66\1\64\1\60"+
                    "\1\65\1\42\1\21\12\13\1\57\1\56\1\70\1\61\1\71\2\0"+
                    "\1\63\2\12\1\35\1\12\1\12\1\12\1\12\1\12\4\12\1\40"+
                    "\1\36\3\12\1\12\1\41\2\12\1\37\1\12\1\62\1\12\1\50"+
                    "\1\17\1\51\3\0\1\7\1\34\1\32\1\44\1\5\1\6\1\26"+
                    "\1\33\1\30\2\12\1\10\1\27\1\31\1\25\1\24\1\12\1\3"+
                    "\1\11\1\2\1\4\1\43\1\45\1\46\1\12\1\47\1\54\1\0"+
                    "\1\55\7\0\1\23\u1fa2\0\1\23\1\23\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\7\1\1\3\1\1\1\4\1\5"+
                    "\1\1\1\6\1\7\7\1\1\10\3\1\1\11\1\12"+
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
                    "\1\1\1\23\1\24\1\25\1\26\1\27\1\30\16\0"+
                    "\1\31\1\32\11\0\1\33\1\34\1\0\1\35\1\0"+
                    "\1\36\1\37\1\40\1\41\1\42\3\0\1\43\3\0"+
                    "\1\44\3\0\1\45\4\0\1\46\11\0\1\47\1\0"+
                    "\1\50\1\51\1\0\1\52\4\0\1\53\2\0\1\54"+
                    "\5\0\1\55\1\0\1\56\1\57\1\60\3\0\1\61"+
                    "\6\0\1\62\1\63\1\64\1\0\1\65\2\0\1\66"+
                    "\2\0\1\67\1\0\1\70\1\71\1\72\1\73";

    private static int [] zzUnpackAction() {
        int [] result = new int[156];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
                    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\72\0\72\0\u02b8\0\72"+
                    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
                    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\72\0\72\0\72\0\72"+
                    "\0\72\0\72\0\72\0\u05aa\0\72\0\72\0\u05e4\0\72"+
                    "\0\72\0\72\0\72\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
                    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
                    "\0\u0910\0\u094a\0\u0984\0\72\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
                    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\72\0\u0c02"+
                    "\0\u0c3c\0\72\0\u0c76\0\72\0\72\0\72\0\72\0\72"+
                    "\0\u0cb0\0\u0cea\0\u0d24\0\72\0\u0d5e\0\u0d98\0\u0dd2\0\72"+
                    "\0\u0e0c\0\u0e46\0\u0e80\0\u094a\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
                    "\0\72\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
                    "\0\u1138\0\u1172\0\72\0\u11ac\0\72\0\72\0\u11e6\0\72"+
                    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\72\0\u1308\0\u1342\0\72"+
                    "\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\72\0\u149e\0\72"+
                    "\0\72\0\72\0\u14d8\0\u1512\0\u154c\0\72\0\u1586\0\u15c0"+
                    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\72\0\72\0\72\0\u16e2"+
                    "\0\72\0\u171c\0\u1756\0\72\0\u1790\0\u17ca\0\72\0\u1804"+
                    "\0\72\0\72\0\72\0\72";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[156];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                    "\1\2\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
                    "\1\20\1\21\1\20\1\0\1\22\2\2\1\23\1\24"+
                    "\1\25\1\26\1\2\1\27\1\30\4\2\1\31\1\32"+
                    "\1\33\1\34\2\2\1\35\1\36\1\37\1\40\1\41"+
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\2\1\50"+
                    "\1\51\1\52\1\53\1\54\1\55\74\0\12\56\10\0"+
                    "\16\56\1\0\5\56\12\0\2\56\11\0\1\57\75\0"+
                    "\1\60\106\0\1\61\76\0\1\62\14\0\1\63\32\0"+
                    "\1\64\1\65\14\0\1\66\72\0\1\67\2\0\1\70"+
                    "\105\0\1\71\37\0\1\13\26\0\1\72\31\0\11\73"+
                    "\11\0\16\73\1\0\5\73\12\0\2\73\10\0\12\74"+
                    "\10\0\16\74\1\0\5\74\12\0\2\74\27\0\1\75"+
                    "\53\0\1\76\75\0\1\77\15\0\1\100\75\0\1\101"+
                    "\47\0\1\102\115\0\1\103\45\0\1\104\15\0\1\105"+
                    "\102\0\1\106\75\0\1\107\36\0\1\110\67\0\1\111"+
                    "\17\0\1\112\77\0\1\113\117\0\1\114\73\0\1\115"+
                    "\67\0\1\116\7\0\1\117\61\0\1\120\11\0\1\74"+
                    "\74\0\1\121\130\0\1\122\30\0\1\123\133\0\1\124"+
                    "\55\0\1\125\51\0\1\126\106\0\1\127\47\0\1\130"+
                    "\75\0\1\131\110\0\1\132\73\0\1\133\54\0\1\134"+
                    "\60\0\11\135\11\0\16\135\1\0\5\135\12\0\2\135"+
                    "\6\0\15\75\1\0\4\75\2\0\46\75\25\0\1\136"+
                    "\74\0\1\137\44\0\1\140\70\0\1\141\115\0\1\142"+
                    "\52\0\1\143\131\0\1\144\47\0\1\145\103\0\1\146"+
                    "\60\0\1\147\51\0\1\150\70\0\1\151\22\0\1\152"+
                    "\46\0\1\153\114\0\1\154\66\0\1\155\46\0\1\156"+
                    "\100\0\1\121\67\0\1\157\65\0\1\160\75\0\1\161"+
                    "\64\0\1\162\102\0\1\163\104\0\1\164\74\0\1\165"+
                    "\45\0\1\166\117\0\1\167\41\0\1\170\114\0\1\171"+
                    "\53\0\1\172\121\0\1\173\40\0\1\174\71\0\1\175"+
                    "\113\0\1\176\50\0\1\177\66\0\1\200\66\0\1\201"+
                    "\122\0\1\202\70\0\1\203\52\0\1\204\61\0\1\205"+
                    "\132\0\1\206\55\0\1\207\50\0\1\210\67\0\1\211"+
                    "\125\0\1\212\33\0\1\213\72\0\1\214\72\0\1\215"+
                    "\117\0\1\216\51\0\1\217\65\0\1\220\131\0\1\221"+
                    "\33\0\1\222\67\0\1\223\120\0\1\224\64\0\1\225"+
                    "\50\0\1\226\110\0\1\227\75\0\1\230\67\0\1\231"+
                    "\47\0\1\232\64\0\1\233\71\0\1\234\67\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[6206];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\12\1\2\11\1\1\1\11\14\1\7\11"+
                    "\1\1\2\11\1\1\4\11\2\1\16\0\1\11\1\1"+
                    "\11\0\1\11\1\1\1\0\1\11\1\0\5\11\3\0"+
                    "\1\11\3\0\1\11\3\0\1\1\4\0\1\11\11\0"+
                    "\1\11\1\0\2\11\1\0\1\11\4\0\1\11\2\0"+
                    "\1\11\5\0\1\11\1\0\3\11\3\0\1\11\6\0"+
                    "\3\11\1\0\1\11\2\0\1\11\2\0\1\11\1\0"+
                    "\4\11";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[156];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    Yylex(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 206) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

      /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1:
                {
                }
                case 60: break;
                case 2:
                { return YYParser.SINGLE_QUOTE_KW;
                }
                case 61: break;
                case 3:
                { return YYParser.ADADSABET;
                }
                case 62: break;
                case 4:
                { return YYParser.NEWLINE_KW;
                }
                case 63: break;
                case 5:
                { return YYParser.NULL_KW;
                }
                case 64: break;
                case 6:
                { return YYParser.WHITESPACE;
                }
                case 65: break;
                case 7:
                { return YYParser.DIV_KW;
                }
                case 66: break;
                case 8:
                { return YYParser.DOT_KW;
                }
                case 67: break;
                case 9:
                { return YYParser.UPTO_KW;
                }
                case 68: break;
                case 10:
                { return YYParser.DOWNTO_KW;
                }
                case 69: break;
                case 11:
                { return YYParser.LP_KW;
                }
                case 70: break;
                case 12:
                { return YYParser.RP_KW;
                }
                case 71: break;
                case 13:
                { return YYParser.LCB_KW;
                }
                case 72: break;
                case 14:
                { return YYParser.RCB_KW;
                }
                case 73: break;
                case 15:
                { return YYParser.SEMICOLON_KW;
                }
                case 74: break;
                case 16:
                { return YYParser.COLON_KW;
                }
                case 75: break;
                case 17:
                { return YYParser.COMMA_KW;
                }
                case 76: break;
                case 18:
                { return YYParser.EQ_KW;
                }
                case 77: break;
                case 19:
                { return YYParser.PLUS_KW;
                }
                case 78: break;
                case 20:
                { return YYParser.MINUS_KW;
                }
                case 79: break;
                case 21:
                { return YYParser.MUL_KW;
                }
                case 80: break;
                case 22:
                { return YYParser.MOD_KW;
                }
                case 81: break;
                case 23:
                { return YYParser.LT_KW;
                }
                case 82: break;
                case 24:
                { return YYParser.GT_KW;
                }
                case 83: break;
                case 25:
                { return YYParser.HARF;
                }
                case 84: break;
                case 26:
                { return YYParser.COMMENTS;
                }
                case 85: break;
                case 27:
                { return YYParser.TWO_DOTS_KW;
                }
                case 86: break;
                case 28:
                { return YYParser.AND_KW;
                }
                case 87: break;
                case 29:
                { return YYParser.DO_KW;
                }
                case 88: break;
                case 30:
                { return YYParser.ASS_KW;
                }
                case 89: break;
                case 31:
                { return YYParser.OR_KW;
                }
                case 90: break;
                case 32:
                { return YYParser.LE_KW;
                }
                case 91: break;
                case 33:
                { return YYParser.NE_KW;
                }
                case 92: break;
                case 34:
                { return YYParser.GE_KW;
                }
                case 93: break;
                case 35:
                { return YYParser.END_KW;
                }
                case 94: break;
                case 36:
                { return YYParser.FOR_KW;
                }
                case 95: break;
                case 37:
                { return YYParser.REALCONST;
                }
                case 96: break;
                case 38:
                { return YYParser.INTEGER_KW;
                }
                case 97: break;
                case 39:
                { return YYParser.BOOLSABET;
                }
                case 98: break;
                case 40:
                { return YYParser.UPTO;
                }
                case 99: break;
                case 41:
                { return YYParser.EXIT_KW;
                }
                case 100: break;
                case 42:
                { return YYParser.AGAR_KW;
                }
                case 101: break;
                case 43:
                { return YYParser.MAIN_KW;
                }
                case 102: break;
                case 44:
                { return YYParser.CHAR_KW;
                }
                case 103: break;
                case 45:
                { return YYParser.WHEN_KW;
                }
                case 104: break;
                case 46:
                { return YYParser.RAVIE_KW;
                }
                case 105: break;
                case 47:
                { return YYParser.FLOAT_KW;
                }
                case 106: break;
                case 48:
                { return YYParser.ANGAH_KW;
                }
                case 107: break;
                case 49:
                { return YYParser.MORED_KW;
                }
                case 108: break;
                case 50:
                { return YYParser.WHILE_KW;
                }
                case 109: break;
                case 51:
                { return YYParser.SWITCH_KW;
                }
                case 110: break;
                case 52:
                { return YYParser.SHENASE;
                }
                case 111: break;
                case 53:
                { return YYParser.NAGHIZ_KW;
                }
                case 112: break;
                case 54:
                { return YYParser.DOWNTO;
                }
                case 113: break;
                case 55:
                { return YYParser.PROGRAM_KW;
                }
                case 114: break;
                case 56:
                { return YYParser.BOOLEAN_KW;
                }
                case 115: break;
                case 57:
                { return YYParser.VAGARNA_KW;
                }
                case 116: break;
                case 58:
                { return YYParser.DEFAULT_KW;
                }
                case 117: break;
                case 59:
                { return YYParser.BAZGASHT_KW;
                }
                case 118: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        { return 0; }
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
